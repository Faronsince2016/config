# ---------------------------------------- 
# Enable conf file changes, while tmux is running.
# ---------------------------------------- 
# enter tmux’s Command mode with PREFIX : and type
# source-file ~/.tmux.conf
# Or use PREFIX r
bind r source-file ~/.tmux.conf \; display "Reloaded .tmux.conf!"


# ---------------------------------------- 
# Manage configurattion with tmuxinator
# ----------------------------------------
# $ sudo gem install tmuxinator
# add below line to .bash_profile
# 	export EDITOR=vim
# new a configure file
# 	$ tmuxinator open <project_name>
# open a project
# 	$ tmuxinator <project_name>


# ---------------------------------------- 
# Common shortcut
# ----------------------------------------
# rename a window: PREFIX ,
# new a window: PREFIX c
# copy: PREFIX [, SPACE to start, ENTER to end
# paste: PREFIX ]
# kill pane: PREFIX x
# new session: tmux new -s yangmingge


# Destroy the given session, closing any windows linked to it and no other 
# sessions, and detaching all clients attached to it.
# tmux kill-session -t yangmingge


# Use CTRL-a instead of CTRL-b as prefix (for GNU-Screen user).
# Using the -g switch, for “global,” which sets the option for all tmux 
# sessions we create.
set -g prefix C-a


# tmux adds a very small delay when sending commands, and this delay can 
# interfere with other programs such as the Vim text editor. We can set this 
# delay so it’s much more responsive.
set -sg escape-time 1


# Make windows index start at 1 instead of default 0. 
set -g base-index 1


# set-window-option -> setw
setw -g pane-base-index 1


# We’ve remapped CTRL-a as our Prefix, but programs such as Vim, Emacs, and 
# even the regular Bash shell also use that combination. We need to configure
# tmux to let us send that command through when we need it. 
# Send CTRL-a to an application running within tmux simply by pressing 
# CTRL-a twice.
bind C-a send-prefix


# split window
bind | split-window -h
bind _ split-window -v


# Moving from pane to pane
bind h select-pane -L
bind j select-pane -D
bind k select-pane -U
bind l select-pane -R


# resize pane
# add -r to redo without pressing bind key
bind -r H resize-pane -L 5 
bind -r J resize-pane -D 5 
bind -r K resize-pane -U 5 
bind -r L resize-pane -R 5


# disable mouse
setw -g mode-mouse off 
set -g mouse-select-pane off
set -g mouse-resize-pane off
set -g mouse-select-window off


# make the active pane more apparent
set -g pane-border-fg green
set -g pane-border-bg black
set -g pane-active-border-fg white 
set -g pane-active-border-bg yellow


# vi mode for working with the buffer
# Pressing PREFIX [ places us in Copy mode
# then use h, j, k, l to move around, press ENTER to esc Copy mode
setw -g mode-keys vi


# status bar colors
set -g status-fg white
set -g status-bg black 

setw -g window-status-fg white 
setw -g window-status-bg black 
setw -g window-status-attr dim 

setw -g window-status-current-fg white 
setw -g window-status-current-bg red 
setw -g window-status-current-attr bright 


set -g status-utf8 on
set -g status-left-length 40
#set -g status-left "#[fg=green]#S #[fg=yellow]#I #[fg=cyan]#P #[fg=yellow]广告位招租"
set -g status-left "#[fg=green]#S #[fg=yellow]#I #[fg=cyan]#P"


# pane/window movement
# ====================
# join-pane [-dhv] [-l size | -p percentage] [-s src-pane] [-t dst-pane]
# Like split-window, but instead of splitting dst-pane and creating a new 
# pane, split it and move src-pane into the space.  This can be used to 
# reverse break-pane.
bind-key + command-prompt -p "join pane from window:"  "join-pane -h -s ':%%'"
# break-pane [-d] [-t target-pane] (alias: breakp)
# Break target-pane off from its containing window to make it the only pane 
# in a new window.  If -d is given, the new window does not become the 
# current window.
bind - break-pane -d
#bind-key - command-prompt -p "send pane to window:"  "join-pane -t ':%%'"


